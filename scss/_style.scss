@charset "utf-8";
$base-size: 0.2564vw;
//------------------------------spacing
//.mt-0 => margin-top level 1
$spacing-types: (
  "m": margin,
  "p": padding,
);
$spacing-directions: (
  "t": top,
  "b": bottom,
  "r": right,
  "l": left,
);
// opacity透明度
@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=$opacity * 100);
}

// clearfix清除浮动，float
@mixin clearfix {
  *zoom: 1;
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//一行省略
@mixin overell {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// 多行省略
@mixin overelMore($num) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $num;
  -webkit-box-orient: vertical;
}

//icon

/*图标*/

@mixin icon($url) {
  [class^="myicon-"] {
    display: inline-block;
    background: url($url) no-repeat 0 0;
    // 两倍图780px的1/2=设计图的390px，保证清晰度
    background-size: 100vw;
  }
}

@mixin appicon($left, $top, $width, $height) {
  background-position: $left $top;
  width: $width;
  height: $height;
}

//------------------------------定义颜色
//$colorKey表示键，$color表示颜色值
@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color;
  }
  .bg-#{$colorKey} {
    background-color: $color;
  }
}
//------------------------------text-align 对齐方式
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var;
  }
}
//------------------------------font size
//生成字体大小
$fonts: 12;
@while $fonts < 100 {
  .fs-#{$fonts} {
    font-size: $fonts * $base-size;
  }
  $fonts: $fonts + 2;
}
//------------------------------flex
.d-flex {
  display: flex;
}
//默认是水平的，column垂直方向的
.flex-column {
  flex-direction: column;
}
$flex-jc: (
  "start": flex-start,
  "end": flex-end,
  "center": center,
  "between": space-between,
  "around": space-around,
  "stretch": stretch,
);
@each $key, $value in $flex-jc {
  .jc-#{$key} {
    justify-content: $value;
  }
}
$flex-ai: (
  "start": flex-start,
  "end": flex-end,
  "center": center,
  "stretch": stretch,
);
@each $key, $value in $flex-ai {
  .ai-#{$key} {
    align-items: $value;
  }
}

//让所有弹性盒模型对象的子元素都有相同的长度，且忽略它们内部的内容；作用在display:flex的子元素
.flex-1 {
  flex: 1;
}

//flex-grow 属性用于设置或检索弹性盒子的扩展比率
.flex-grow-1 {
  flex-grow: 1;
}

//弹性盒子，子元素换行方式
$flexWraps: (
  "nowrap": nowrap,
  "wrap": wrap,
  "reverse": wrap-reverse,
);
@each $wrapKey, $var in $flexWraps {
  .fWrap-#{$wrapKey} {
    flex-wrap: $var;
  }
}

//------------------------------spacing
//.mt-0 => margin-top level 0
$mpsize: 5;
@while $mpsize < 100 {
  @each $typeKey, $type in $spacing-types {
    .#{$typeKey}-#{$mpsize} {
      #{$type}: $mpsize * $base-size;
    }
    // mx- my-
    .#{$typeKey}x-#{$mpsize} {
      #{$type}-left: $mpsize * $base-size;
      #{$type}-right: $mpsize * $base-size;
    }
    .#{$typeKey}y-#{$mpsize} {
      #{$type}-top: $mpsize * $base-size;
      #{$type}-bottom: $mpsize * $base-size;
    }
    // .mt-0{margin-top: 0px}
    @each $directionKey, $direction in $spacing-directions {
      .#{$typeKey}#{$directionKey}-#{$mpsize} {
        #{$type}-#{$direction}: $mpsize * $base-size;
      }
    }
  }
  $mpsize: $mpsize + 5;
}
//------------------------------display
$displays: (
  "inline": inline,
  "inblock": inline-block,
  "block": block,
);
@each $key, $var in $displays {
  .d-#{$key} {
    display: $var;
  }
}
//------------------------------visibility
$visibilitys: (
  "H": hidden,
  "V": visible,
);
@each $key, $var in $visibilitys {
  .vi#{$key} {
    visibility: $var;
  }
}
//------------------------------float
$floats: (left, right);
@each $var in $floats {
  .f-#{$var} {
    float: $var;
  }
}
//------------------------------滚动条
$overflows: (
  "H": hidden,
  "A": auto,
);
$overflowsd: (x, y);
@each $var in $overflows {
  .overflow#{$var} {
    overflow: $var;
  }
  @each $vard in $overflowsd {
    .overflow#{$var}-#{$vard} {
      overflow-#{$vard}: $var;
    }
  }
}
//------------------------------width % height %
$whPer: (1, 2, 3, 4, 5);
@each $var in $whPer {
  .widthPer-#{$var} {
    width: calc(100% / #{$var});
  }
  .heightPer-#{$var} {
    height: calc(100% / #{$var});
  }
}
//------------------------------line-height
$lineH: 10;
@while $lineH < 100 {
  .lineH-#{$lineH} {
    line-height: $lineH * $base-size;
  }
  .heightDiv-#{$lineH} {
    height: $lineH * $base-size;
  }
  $lineH: $lineH + 5;
}
//------------------------------box-sizing
$boxSizing: (
  "b": border-box,
  "c": content-box,
);
@each $key, $var in $boxSizing {
  .box-#{$key} {
    box-sizing: $var;
  }
}
// 由于使用的是mui的css，所以初始化标签的样式页一并使用mui的

/*被访问过链接*/
body,
div,
ul,
ol,
li,
h1,
h2,
h3,
h4,
h5,
h6,
form,
input,
textarea,
p,
th,
td,
button {
  margin: 0;
  padding: 0;
}
body,
button,
input,
select,
textarea {
  //表示字体大小加行高，20px/12px 约等于1.6667，向上四舍五入
  font: 3.0769vw/1.6667 "宋体", Arial, Verdana, tahoma, Helvetica, sans-serif;
}

input,
select,
textarea {
  // 设置字体属性为默认大小，是相对于浏览器默认字体大小或继承body设定的字体大小来说的
  font-size: 100%;
  line-height: inherit; //控件元素默认行高是normal是不受外部影响的，需要重置为inherit
  outline: none;
}
/* 去掉各Table cell 的边距并让其边重合 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* IE bug fixed: th 不继承 text-align*/
th {
  text-align: inherit;
}

/* 去除默认边框 */
img {
  border: 0;
}

/* ie6 7 8(q) bug 显示为行内表现 */
iframe {
  display: block;
}

/* 去掉列表前的标识, li 会继承 */
ol,
ul {
  list-style: none;
}

/* 标题都自定义, 适应多个系统应用 */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: 500;
}

a {
  &:link,
  &:visited,
  &:hover,
  &:active {
    text-decoration: none;
    color: #000000;
  }
}

/* 加粗 */

.fwb {
  font-weight: bold;
}

//一行省略
.overOne {
  @include overell;
}

//换行，文字与单词换行

//指定如果足够长得话，应该换行，尽量不拆分单词
.wpword {
  word-wrap: break-word;
}
// 不管单词的完整性，拆分单词换行
.wbword {
  word-break: break-word;
}

//手型
.curp {
  cursor: pointer;
}

// 清除浮动
.clear {
  @include clearfix;
}
